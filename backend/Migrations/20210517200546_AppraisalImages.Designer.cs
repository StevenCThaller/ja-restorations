// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

namespace backend.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210517200546_AppraisalImages")]
    partial class AppraisalImages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Models.Appraisal", b =>
                {
                    b.Property<int>("appraisalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("estimatedWeight")
                        .HasColumnType("int");

                    b.Property<decimal>("height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("length")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<bool>("sturdy")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<decimal>("width")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("appraisalId");

                    b.HasIndex("userId");

                    b.ToTable("Appraisals");
                });

            modelBuilder.Entity("backend.Models.AppraisalImage", b =>
                {
                    b.Property<int>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("appraisalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("furnitureId")
                        .HasColumnType("int");

                    b.Property<int>("s3ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("imageId");

                    b.HasIndex("appraisalId");

                    b.HasIndex("furnitureId");

                    b.HasIndex("s3ImageId");

                    b.ToTable("AppraisalImages");
                });

            modelBuilder.Entity("backend.Models.Color", b =>
                {
                    b.Property<int>("colorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("colorId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("backend.Models.Furniture", b =>
                {
                    b.Property<int>("furnitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("estimatedWeight")
                        .HasColumnType("int");

                    b.Property<decimal>("height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("length")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("priceCeiling")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("priceFloor")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("width")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("furnitureId");

                    b.HasIndex("typeId");

                    b.ToTable("Furniture");
                });

            modelBuilder.Entity("backend.Models.FurnitureHasColor", b =>
                {
                    b.Property<int>("furnitureHasColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("colorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("furnitureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("furnitureHasColorId");

                    b.HasIndex("colorId");

                    b.HasIndex("furnitureId");

                    b.ToTable("FurnitureHasColors");
                });

            modelBuilder.Entity("backend.Models.FurnitureImage", b =>
                {
                    b.Property<int>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("furnitureId")
                        .HasColumnType("int");

                    b.Property<int>("s3ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("imageId");

                    b.HasIndex("furnitureId");

                    b.HasIndex("s3ImageId");

                    b.ToTable("FurnitureImages");
                });

            modelBuilder.Entity("backend.Models.FurnitureType", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("typeId");

                    b.ToTable("FurnitureTypes");
                });

            modelBuilder.Entity("backend.Models.S3Image", b =>
                {
                    b.Property<int>("s3ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("s3ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("backend.Models.Sale", b =>
                {
                    b.Property<int>("saleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dateSold")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("finalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("furnitureId")
                        .HasColumnType("int");

                    b.HasKey("saleId");

                    b.HasIndex("furnitureId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("lastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("oauthIssuer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("oauthSubject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Appraisal", b =>
                {
                    b.HasOne("backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.AppraisalImage", b =>
                {
                    b.HasOne("backend.Models.Appraisal", null)
                        .WithMany("images")
                        .HasForeignKey("appraisalId");

                    b.HasOne("backend.Models.Furniture", "furniture")
                        .WithMany()
                        .HasForeignKey("furnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.S3Image", "s3Image")
                        .WithMany()
                        .HasForeignKey("s3ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Furniture", b =>
                {
                    b.HasOne("backend.Models.FurnitureType", "type")
                        .WithMany("pieces")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.FurnitureHasColor", b =>
                {
                    b.HasOne("backend.Models.Color", "color")
                        .WithMany("pieces")
                        .HasForeignKey("colorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Furniture", "furniture")
                        .WithMany("colors")
                        .HasForeignKey("furnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.FurnitureImage", b =>
                {
                    b.HasOne("backend.Models.Furniture", "furniture")
                        .WithMany("images")
                        .HasForeignKey("furnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.S3Image", "s3Image")
                        .WithMany()
                        .HasForeignKey("s3ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Sale", b =>
                {
                    b.HasOne("backend.Models.Furniture", "furniture")
                        .WithOne("sale")
                        .HasForeignKey("backend.Models.Sale", "furnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
